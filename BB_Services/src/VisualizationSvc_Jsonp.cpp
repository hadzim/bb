/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
///includes
#include "BB/Services/VisualizationSvc_Jsonp.h"
#include "Client/Visualization_Json.h"
#include "Server/Visualization_Json.h"

#include <TBS/Services/Json/JsonServicesImpl.h>

//convertors
namespace jsonrpc {template<>
class InternalConvertor<TBS::BB::Visualization::SensorData> { 
	public:
		static TBS::BB::Visualization::SensorData json2Cpp(const Json::Value & val) {
		   TBS::BB::Visualization::SensorData var;
		   		var.sensorType =  Convertor::json2Cpp< std::string > (val["sensorType"]);
		   		var.sensorName =  Convertor::json2Cpp< std::string > (val["sensorName"]);
		   		var.unit =  Convertor::json2Cpp< std::string > (val["unit"]);
		   		var.date =  Convertor::json2Cpp< std::string > (val["date"]);
		   		var.status =  Convertor::json2Cpp< int32_t > (val["status"]);
		   		var.value =  Convertor::json2Cpp< double > (val["value"]);
		   		var.textValue =  Convertor::json2Cpp< std::string > (val["textValue"]);
			return var;
		}
		static Json::Value cpp2Json(const TBS::BB::Visualization::SensorData & val) {
		    Json::Value retval(Json::objectValue);
		    retval["sensorType"] = Convertor::cpp2Json< std::string >(val.sensorType);
		    retval["sensorName"] = Convertor::cpp2Json< std::string >(val.sensorName);
		    retval["unit"] = Convertor::cpp2Json< std::string >(val.unit);
		    retval["date"] = Convertor::cpp2Json< std::string >(val.date);
		    retval["status"] = Convertor::cpp2Json< int32_t >(val.status);
		    retval["value"] = Convertor::cpp2Json< double >(val.value);
		    retval["textValue"] = Convertor::cpp2Json< std::string >(val.textValue);
			return retval;
		}
};
template<>
class InternalConvertor<TBS::BB::Visualization::SensorInfo> { 
	public:
		static TBS::BB::Visualization::SensorInfo json2Cpp(const Json::Value & val) {
		   TBS::BB::Visualization::SensorInfo var;
		   		var.sensorType =  Convertor::json2Cpp< std::string > (val["sensorType"]);
		   		var.sensorName =  Convertor::json2Cpp< std::string > (val["sensorName"]);
			return var;
		}
		static Json::Value cpp2Json(const TBS::BB::Visualization::SensorInfo & val) {
		    Json::Value retval(Json::objectValue);
		    retval["sensorType"] = Convertor::cpp2Json< std::string >(val.sensorType);
		    retval["sensorName"] = Convertor::cpp2Json< std::string >(val.sensorName);
			return retval;
		}
};
}

namespace TBS { 
	namespace BB { 
		namespace Visualization { 
			namespace Json { 
	   Client::Client(const TBS::Services::JsonClientChannel & ch) : 
	       ch(ch){
	   }
	   TBS::BB::Visualization::IQuery & Client::Query(){
   if (!query_) {      query_ =  new TBS::BB::Visualization::Stub::Query_JsonClient(::TBS::Services::convert(ch));
   }   return *query_;
}

	   
	   
	   Server::Server(const TBS::Services::JsonServerChannel & ch) : 
	   	   channel(new TBS::Services::JsonpCommChannelHolder(ch)){
		   
	    } 
	    void Server::start(){ 
	   	   channel.cast<TBS::Services::JsonpCommChannelHolder>()->interface.StartListening();
	    } 
	    void Server::stop(){ 
	   	   channel.cast<TBS::Services::JsonpCommChannelHolder>()->interface.StopListening();
	    } 
	    
	   TBS::Services::IServer::Ptr Server::createQuery(TBS::BB::Visualization::IQuery::Ptr impl){
   return new TBS::Services::JsonServerImpl<TBS::BB::Visualization::IQuery, TBS::BB::Visualization::Stub::Query_JsonServer>(this->channel.cast<TBS::Services::JsonpCommChannelHolder>()->interface, impl);
}

 } 
 } 
 } 
 } 



