/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _WEBUI_H_
#define _WEBUI_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include "TBS/Services/Types.h"
#include <string>
#include <vector>
#include <map>

namespace TBS{ namespace Services{ namespace Introspection{ class Class; struct Struct; } } } 


namespace TBS { 
	namespace BB { 
		namespace WebUI { 
       struct RuntimeStatus {
				
				static std::string name(){
					static std::string n = "RuntimeStatus";
					return n;
				}
				static const ::TBS::Services::Introspection::Struct & introspection();
				
 //members 
						int32_t index;
		std::string readableIndex;
		int32_t value;
		std::string readableValue;

				
			};
 } 
 } 
 } 


namespace TBS { 
	namespace BB { 
		namespace WebUI { 
       struct SensorData {
				
				static std::string name(){
					static std::string n = "SensorData";
					return n;
				}
				static const ::TBS::Services::Introspection::Struct & introspection();
				
 //members 
						std::string sensorType;
		std::string sensorName;
		std::string sensorRawName;
		std::string unit;
		std::string date;
		int32_t status;
		double value;
		std::string textValue;

				
			};
 } 
 } 
 } 


namespace TBS { 
	namespace BB { 
		namespace WebUI { 
       struct SensorInfo {
				
				static std::string name(){
					static std::string n = "SensorInfo";
					return n;
				}
				static const ::TBS::Services::Introspection::Struct & introspection();
				
 //members 
						std::string sensorType;
		std::string sensorName;
		std::string sensorRawName;

				
			};
 } 
 } 
 } 


namespace TBS { 
	namespace BB { 
		namespace WebUI { 
       struct SensorProperty {
				
				static std::string name(){
					static std::string n = "SensorProperty";
					return n;
				}
				static const ::TBS::Services::Introspection::Struct & introspection();
				
 //members 
						std::string propertyName;
		std::string propertyValue;

				
			};
 } 
 } 
 } 




namespace TBS { 
	namespace BB { 
		namespace WebUI { 
	   /** [interface] IQuery:  */
       class GEN_SERVICE_API IQuery {
			public:
				typedef Poco::SharedPtr <IQuery> Ptr;
				
				virtual ~IQuery(){}
				
				static std::string name(){
					static std::string n = "TBS.BB.WebUI.Query";
					return n;
				}
				static const ::TBS::Services::Introspection::Class & introspection();
				
 //methods 
				
		/** 
		  * [method] GetSensors: 
		  * [out] std::vector< SensorInfo > sensors: 
		  */ 
		        virtual std::vector< SensorInfo > GetSensors() = 0;

		/** 
		  * [method] GetSensorData: 
		  * [in] std::string sensorType: 
		  * [in] std::string sensorName: 
		  * [out] std::vector< SensorData > sensorData: 
		  */ 
		        virtual std::vector< SensorData > GetSensorData(const std::string & sensorType, const std::string & sensorName) = 0;

		/** 
		  * [method] ClearSensorData: 
		  * [in] std::string sensorType: 
		  * [in] std::string sensorName: 
		  */ 
		        virtual void ClearSensorData(const std::string & sensorType, const std::string & sensorName) = 0;

		/** 
		  * [method] GetSensorsData: 
		  * [in] std::string sensorType: 
		  * [out] std::vector< SensorData > allSensorData: 
		  */ 
		        virtual std::vector< SensorData > GetSensorsData(const std::string & sensorType) = 0;

		/** 
		  * [method] GetRuntimeStatus: 
		  * [out] std::vector< RuntimeStatus > status: 
		  */ 
		        virtual std::vector< RuntimeStatus > GetRuntimeStatus() = 0;

				
 //signals 
				
				
			};
 } 
 } 
 } 


namespace TBS { 
	namespace BB { 
		namespace WebUI { 
	   /** [interface] IConfiguration:  */
       class GEN_SERVICE_API IConfiguration {
			public:
				typedef Poco::SharedPtr <IConfiguration> Ptr;
				
				virtual ~IConfiguration(){}
				
				static std::string name(){
					static std::string n = "TBS.BB.WebUI.Configuration";
					return n;
				}
				static const ::TBS::Services::Introspection::Class & introspection();
				
 //methods 
				
		/** 
		  * [method] GetSensorProperties: 
		  * [in] std::string sensorType: 
		  * [in] std::string sensorRawName: 
		  * [out] std::vector< SensorProperty > sensorProperty: 
		  */ 
		        virtual std::vector< SensorProperty > GetSensorProperties(const std::string & sensorType, const std::string & sensorRawName) = 0;

		/** 
		  * [method] SetSensorProperty: 
		  * [in] std::string sensorType: 
		  * [in] std::string sensorRawName: 
		  * [in] std::string sensorPropertyName: 
		  * [in] std::string sensorPropertyValue: 
		  */ 
		        virtual void SetSensorProperty(const std::string & sensorType, const std::string & sensorRawName, const std::string & sensorPropertyName, const std::string & sensorPropertyValue) = 0;

		/** 
		  * [method] SetRuntimeStatus: 
		  * [in] std::string status: 
		  */ 
		        virtual void SetRuntimeStatus(const std::string & status) = 0;

		/** 
		  * [method] SendTask: 
		  * [in] std::string what: 
		  * [in] std::string params: 
		  * [in] std::string from: 
		  * [in] std::string to: 
		  */ 
		        virtual void SendTask(const std::string & what, const std::string & params, const std::string & from, const std::string & to) = 0;

				
 //signals 
				
				
			};
 } 
 } 
 } 



#endif //_WEBUI_H_

