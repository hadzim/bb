/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _WEBUI_JSONCLIENT_H_
#define _WEBUI_JSONCLIENT_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <jsonrpc/rpc.h>
///includes
#include "BB/Services/WebUI.h"


namespace TBS { 
	namespace BB { 
		namespace WebUI { 
			namespace Stub { 
       class Query_JsonClient : public TBS::BB::WebUI::IQuery {
			public:
				typedef Poco::SharedPtr <Query_JsonClient> Ptr;
				
				Query_JsonClient(jsonrpc::AbstractClientConnector* param){
					this->client = std::auto_ptr<jsonrpc::Client>(new jsonrpc::Client(param));
				}
				Query_JsonClient(const jsonrpc::HttpClientParams & p){
					this->client = std::auto_ptr<jsonrpc::Client>(new jsonrpc::Client(new jsonrpc::HttpInterfaceClient(TBS::BB::WebUI::IQuery::name(), p)));
				}
				virtual ~Query_JsonClient() {
				 }

				
				
 //methods 
				        std::vector< SensorInfo > GetSensors(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            return jsonrpc::Convertor::json2Cpp<std::vector< SensorInfo > >(this->client->CallMethod("GetSensors", pIn));
        }
        std::vector< SensorData > GetSensorData(const std::string & sensorType, const std::string & sensorName){
            ::Json::Value pIn;
            pIn["sensorType"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorType); 
pIn["sensorName"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorName); 

            return jsonrpc::Convertor::json2Cpp<std::vector< SensorData > >(this->client->CallMethod("GetSensorData", pIn));
        }
        std::vector< SensorData > GetSensorsData(const std::string & sensorType){
            ::Json::Value pIn;
            pIn["sensorType"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorType); 

            return jsonrpc::Convertor::json2Cpp<std::vector< SensorData > >(this->client->CallMethod("GetSensorsData", pIn));
        }

				
 //signals 
				//TODO
				
		private: 
				std::auto_ptr<jsonrpc::Client> client;
			};
 } 
 } 
 } 
 } 


namespace TBS { 
	namespace BB { 
		namespace WebUI { 
			namespace Stub { 
       class Configuration_JsonClient : public TBS::BB::WebUI::IConfiguration {
			public:
				typedef Poco::SharedPtr <Configuration_JsonClient> Ptr;
				
				Configuration_JsonClient(jsonrpc::AbstractClientConnector* param){
					this->client = std::auto_ptr<jsonrpc::Client>(new jsonrpc::Client(param));
				}
				Configuration_JsonClient(const jsonrpc::HttpClientParams & p){
					this->client = std::auto_ptr<jsonrpc::Client>(new jsonrpc::Client(new jsonrpc::HttpInterfaceClient(TBS::BB::WebUI::IConfiguration::name(), p)));
				}
				virtual ~Configuration_JsonClient() {
				 }

				
				
 //methods 
				        void SetSensorProperty(const std::string & sensorType, const std::string & sensorRawName, const std::string & sensorProperty, const std::string & sensorValue){
            ::Json::Value pIn;
            pIn["sensorType"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorType); 
pIn["sensorRawName"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorRawName); 
pIn["sensorProperty"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorProperty); 
pIn["sensorValue"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorValue); 

            this->client->CallMethod("SetSensorProperty", pIn);
        }

				
 //signals 
				//TODO
				
		private: 
				std::auto_ptr<jsonrpc::Client> client;
			};
 } 
 } 
 } 
 } 



#endif //_WEBUI_JSONCLIENT_H_

