/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _WEBUI_JSONCLIENT_H_
#define _WEBUI_JSONCLIENT_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <jsonrpc/rpc.h>
#include <TBS/Services/Json/JsonServices.h>
///includes
#include "BB/Services//WebUI.h"


namespace TBS { 
	namespace BB { 
		namespace WebUI { 
			namespace Stub { 
       class Query_JsonClient : public TBS::BB::WebUI::IQuery {
			public:
				typedef Poco::SharedPtr <Query_JsonClient> Ptr;
				
				Query_JsonClient(jsonrpc::AbstractClientConnector::Ptr param){
					this->client = std::unique_ptr<jsonrpc::Client>(new jsonrpc::Client(param));
				}
				virtual ~Query_JsonClient() {
				 }

				
				
 //methods 
				        std::vector< SensorInfo > GetSensors(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            return jsonrpc::Convertor::json2Cpp<std::vector< SensorInfo > >(this->client->CallMethod("GetSensors", pIn));
        }
        std::vector< SensorData > GetSensorData(const std::string & sensorType, const std::string & sensorName){
            ::Json::Value pIn;
            pIn["sensorType"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorType); 
pIn["sensorName"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorName); 

            return jsonrpc::Convertor::json2Cpp<std::vector< SensorData > >(this->client->CallMethod("GetSensorData", pIn));
        }
        void ClearSensorData(const std::string & sensorType, const std::string & sensorName){
            ::Json::Value pIn;
            pIn["sensorType"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorType); 
pIn["sensorName"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorName); 

            this->client->CallMethod("ClearSensorData", pIn);
        }
        std::vector< SensorData > GetSensorsData(const std::string & sensorType){
            ::Json::Value pIn;
            pIn["sensorType"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorType); 

            return jsonrpc::Convertor::json2Cpp<std::vector< SensorData > >(this->client->CallMethod("GetSensorsData", pIn));
        }
        std::vector< RuntimeStatus > GetRuntimeStatus(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            return jsonrpc::Convertor::json2Cpp<std::vector< RuntimeStatus > >(this->client->CallMethod("GetRuntimeStatus", pIn));
        }

				
 //signals 
				//TODO
				
		private: 
				std::unique_ptr<jsonrpc::Client> client;
			};
 } 
 } 
 } 
 } 


namespace TBS { 
	namespace BB { 
		namespace WebUI { 
			namespace Stub { 
       class Configuration_JsonClient : public TBS::BB::WebUI::IConfiguration {
			public:
				typedef Poco::SharedPtr <Configuration_JsonClient> Ptr;
				
				Configuration_JsonClient(jsonrpc::AbstractClientConnector::Ptr param){
					this->client = std::unique_ptr<jsonrpc::Client>(new jsonrpc::Client(param));
				}
				virtual ~Configuration_JsonClient() {
				 }

				
				
 //methods 
				        std::vector< SensorProperty > GetSensorProperties(const std::string & sensorType, const std::string & sensorRawName){
            ::Json::Value pIn;
            pIn["sensorType"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorType); 
pIn["sensorRawName"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorRawName); 

            return jsonrpc::Convertor::json2Cpp<std::vector< SensorProperty > >(this->client->CallMethod("GetSensorProperties", pIn));
        }
        void SetSensorProperty(const std::string & sensorType, const std::string & sensorRawName, const std::string & sensorPropertyName, const std::string & sensorPropertyValue){
            ::Json::Value pIn;
            pIn["sensorType"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorType); 
pIn["sensorRawName"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorRawName); 
pIn["sensorPropertyName"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorPropertyName); 
pIn["sensorPropertyValue"] = jsonrpc::Convertor::cpp2Json< std::string >(sensorPropertyValue); 

            this->client->CallMethod("SetSensorProperty", pIn);
        }
        void SetRuntimeStatus(const std::string & status){
            ::Json::Value pIn;
            pIn["status"] = jsonrpc::Convertor::cpp2Json< std::string >(status); 

            this->client->CallMethod("SetRuntimeStatus", pIn);
        }
        void SendTask(const std::string & what, const std::string & params, const std::string & from, const std::string & to){
            ::Json::Value pIn;
            pIn["what"] = jsonrpc::Convertor::cpp2Json< std::string >(what); 
pIn["params"] = jsonrpc::Convertor::cpp2Json< std::string >(params); 
pIn["from"] = jsonrpc::Convertor::cpp2Json< std::string >(from); 
pIn["to"] = jsonrpc::Convertor::cpp2Json< std::string >(to); 

            this->client->CallMethod("SendTask", pIn);
        }

				
 //signals 
				//TODO
				
		private: 
				std::unique_ptr<jsonrpc::Client> client;
			};
 } 
 } 
 } 
 } 



#endif //_WEBUI_JSONCLIENT_H_

