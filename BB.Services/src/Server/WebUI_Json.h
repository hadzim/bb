/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _WEBUI_JSONSERVER_H_
#define _WEBUI_JSONSERVER_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <jsonrpc/rpc.h>
///includes
#include "BB/Services/WebUI.h"


namespace TBS { 
	namespace BB { 
		namespace WebUI { 
			namespace Stub { 
	class Query_JsonServer : public jsonrpc::AbstractServerInterface<Query_JsonServer>
		{
			public:
				Query_JsonServer(jsonrpc::ServiceHandlers & handlers, TBS::BB::WebUI::IQuery::Ptr interfaceImpl) :
					jsonrpc::AbstractServerInterface<Query_JsonServer>("TBS.BB.WebUI.Query", handlers), interfaceImpl(interfaceImpl) 
					{
						            this->bindAndAddMethod(new jsonrpc::Procedure("GetSensors", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_ARRAY,  NULL), &Query_JsonServer::GetSensorsI);
            this->bindAndAddMethod(new jsonrpc::Procedure("GetSensorData", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_ARRAY, "sensorType",jsonrpc::JSON_STRING,"sensorName",jsonrpc::JSON_STRING, NULL), &Query_JsonServer::GetSensorDataI);
            this->bindAndAddMethod(new jsonrpc::Procedure("GetSensorsData", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_ARRAY, "sensorType",jsonrpc::JSON_STRING, NULL), &Query_JsonServer::GetSensorsDataI);

					}
					
					        inline virtual void GetSensorsI(const ::Json::Value& request, ::Json::Value& response) 
        {
            response = jsonrpc::Convertor::cpp2Json< std::vector< SensorInfo > >(this->GetSensors());
        }

        inline virtual void GetSensorDataI(const ::Json::Value& request, ::Json::Value& response) 
        {
            response = jsonrpc::Convertor::cpp2Json< std::vector< SensorData > >(this->GetSensorData(jsonrpc::Convertor::json2Cpp< std::string >(request["sensorType"]), jsonrpc::Convertor::json2Cpp< std::string >(request["sensorName"])));
        }

        inline virtual void GetSensorsDataI(const ::Json::Value& request, ::Json::Value& response) 
        {
            response = jsonrpc::Convertor::cpp2Json< std::vector< SensorData > >(this->GetSensorsData(jsonrpc::Convertor::json2Cpp< std::string >(request["sensorType"])));
        }


					        std::vector< SensorInfo > GetSensors(){
        	return interfaceImpl->GetSensors();
        }

        std::vector< SensorData > GetSensorData(const std::string & sensorType, const std::string & sensorName){
        	return interfaceImpl->GetSensorData(sensorType, sensorName);
        }

        std::vector< SensorData > GetSensorsData(const std::string & sensorType){
        	return interfaceImpl->GetSensorsData(sensorType);
        }


			private:
				TBS::BB::WebUI::IQuery::Ptr interfaceImpl;
};
 } 
 } 
 } 
 } 


namespace TBS { 
	namespace BB { 
		namespace WebUI { 
			namespace Stub { 
	class Configuration_JsonServer : public jsonrpc::AbstractServerInterface<Configuration_JsonServer>
		{
			public:
				Configuration_JsonServer(jsonrpc::ServiceHandlers & handlers, TBS::BB::WebUI::IConfiguration::Ptr interfaceImpl) :
					jsonrpc::AbstractServerInterface<Configuration_JsonServer>("TBS.BB.WebUI.Configuration", handlers), interfaceImpl(interfaceImpl) 
					{
						            this->bindAndAddMethod(new jsonrpc::Procedure("SetSensorProperty", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_NULL, "sensorType",jsonrpc::JSON_STRING,"sensorRawName",jsonrpc::JSON_STRING,"sensorProperty",jsonrpc::JSON_STRING,"sensorValue",jsonrpc::JSON_STRING, NULL), &Configuration_JsonServer::SetSensorPropertyI);

					}
					
					        inline virtual void SetSensorPropertyI(const ::Json::Value& request, ::Json::Value& response) 
        {
            this->SetSensorProperty(jsonrpc::Convertor::json2Cpp< std::string >(request["sensorType"]), jsonrpc::Convertor::json2Cpp< std::string >(request["sensorRawName"]), jsonrpc::Convertor::json2Cpp< std::string >(request["sensorProperty"]), jsonrpc::Convertor::json2Cpp< std::string >(request["sensorValue"]));
        }


					        void SetSensorProperty(const std::string & sensorType, const std::string & sensorRawName, const std::string & sensorProperty, const std::string & sensorValue){
        	 interfaceImpl->SetSensorProperty(sensorType, sensorRawName, sensorProperty, sensorValue);
        }


			private:
				TBS::BB::WebUI::IConfiguration::Ptr interfaceImpl;
};
 } 
 } 
 } 
 } 



#endif //_WEBUI_JSONSERVER_H_

