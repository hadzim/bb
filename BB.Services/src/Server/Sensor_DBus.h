/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
 #ifndef _NO_DBUS 
#ifndef _SENSOR_DBUSSERVER_H_
#define _SENSOR_DBUSSERVER_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <Poco/Delegate.h>
#include <Poco/Exception.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <dbus-c++/dbus.h>
#include <dbus/dbus-protocol.h>
///includes
#include "BB/Services/Sensor.h"


namespace TBS { 
	namespace BB { 
		namespace Services { 
			namespace Sensor { 
				namespace Stub { 
	class DataCollector_DBusServer : public ::DBus::InterfaceAdaptor
		{
			public:
				DataCollector_DBusServer(TBS::BB::Services::Sensor::IDataCollector::Ptr impl) :
					::DBus::InterfaceAdaptor("com.TBS.BB.Services.Sensor.DataCollector"), impl(impl){
								register_method(DataCollector_DBusServer, SendSensorData, _SendSensorData_mstub);

				}
				virtual ~DataCollector_DBusServer(){
						
				}
				
				static const std::string & dbuspath(){ static std::string val = "/com/TBS/BB/Services/Sensor"; return val; }
				static const std::string & dbusname(){ static std::string val = "com.TBS.BB.Services.Sensor.DataCollector"; return val; }
                
                //::DBus::IntrospectedInterface *introspect() const {
				//	<introspection>
				//}
				
				
			private:
					::DBus::Message _SendSensorData_mstub(const ::DBus::CallMessage &call){
		try {
		::DBus::MessageIter ri = call.reader();
		std::string _sensorType;
ri >> _sensorType;
		std::string _sensorName;
ri >> _sensorName;
		std::string _sensorRawName;
ri >> _sensorRawName;
		std::string _sensorUnit;
ri >> _sensorUnit;
		std::string _sensorDate;
ri >> _sensorDate;
		int32_t _sensorStatus;
ri >> _sensorStatus;
		double _sensorValue;
ri >> _sensorValue;
		std::string _sensorTextValue;
ri >> _sensorTextValue;
impl->SendSensorData(_sensorType, _sensorName, _sensorRawName, _sensorUnit, _sensorDate, _sensorStatus, _sensorValue, _sensorTextValue);
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}

				
				TBS::BB::Services::Sensor::IDataCollector::Ptr impl;
};
 } 
 } 
 } 
 } 
 } 


namespace TBS { 
	namespace BB { 
		namespace Services { 
			namespace Sensor { 
				namespace Stub { 
	class DataDistributor_DBusServer : public ::DBus::InterfaceAdaptor
		{
			public:
				DataDistributor_DBusServer(TBS::BB::Services::Sensor::IDataDistributor::Ptr impl) :
					::DBus::InterfaceAdaptor("com.TBS.BB.Services.Sensor.DataDistributor"), impl(impl){
								impl->SensorDataReceived += Poco::delegate(this, &DataDistributor_DBusServer::handlerSensorDataReceived);

				}
				virtual ~DataDistributor_DBusServer(){
								impl->SensorDataReceived -= Poco::delegate(this, &DataDistributor_DBusServer::handlerSensorDataReceived);

				}
				
				static const std::string & dbuspath(){ static std::string val = "/com/TBS/BB/Services/Sensor"; return val; }
				static const std::string & dbusname(){ static std::string val = "com.TBS.BB.Services.Sensor.DataDistributor"; return val; }
                
                //::DBus::IntrospectedInterface *introspect() const {
				//	<introspection>
				//}
				
					void SensorDataReceived(const std::string & sensorType, const std::string & sensorName, const std::string & sensorRawName, const std::string & sensorUnit, const std::string & sensorDate, const int32_t & sensorStatus, const double & sensorValue, const std::string & sensorTextValue){
		::DBus::SignalMessage sig("SensorDataReceived");
		::DBus::MessageIter wi = sig.writer();
		wi << sensorType;
		wi << sensorName;
		wi << sensorRawName;
		wi << sensorUnit;
		wi << sensorDate;
		wi << sensorStatus;
		wi << sensorValue;
		wi << sensorTextValue;
		emit_signal(sig);
	}

			private:
				
						void handlerSensorDataReceived(TBS::BB::Services::Sensor::IDataDistributor::SensorDataReceivedArg & arg){
			this->SensorDataReceived(arg.sensorType, arg.sensorName, arg.sensorRawName, arg.sensorUnit, arg.sensorDate, arg.sensorStatus, arg.sensorValue, arg.sensorTextValue);
		}

				TBS::BB::Services::Sensor::IDataDistributor::Ptr impl;
};
 } 
 } 
 } 
 } 
 } 



#endif //_SENSOR_DBUSSERVER_H_
#endif 

