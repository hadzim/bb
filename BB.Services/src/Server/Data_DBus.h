/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
 #ifndef _NO_DBUS 
#ifndef _DATA_DBUSSERVER_H_
#define _DATA_DBUSSERVER_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <Poco/Delegate.h>
#include <Poco/Exception.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <dbus-c++/dbus.h>
#include <dbus/dbus-protocol.h>
///includes
#include "BB/Services//Data.h"


namespace TBS { 
	namespace BB { 
		namespace Services { 
			namespace Data { 
				namespace Stub { 
	class DataCollector_DBusServer : public ::DBus::InterfaceAdaptor
		{
			public:
				DataCollector_DBusServer(TBS::BB::Services::Data::IDataCollector::Ptr impl) :
					::DBus::InterfaceAdaptor("com.TBS.BB.Services.Data.DataCollector"), impl(impl){
								register_method(DataCollector_DBusServer, SendSensorData, _SendSensorData_mstub);
		register_method(DataCollector_DBusServer, SendStatus, _SendStatus_mstub);
		register_method(DataCollector_DBusServer, SendTask, _SendTask_mstub);
		register_method(DataCollector_DBusServer, SendNotification, _SendNotification_mstub);

				}
				virtual ~DataCollector_DBusServer(){
						
				}
				
				static const std::string & dbuspath(){ static std::string val = "/com/TBS/BB/Services/Data"; return val; }
				static const std::string & dbusname(){ static std::string val = "com.TBS.BB.Services.Data.DataCollector"; return val; }
                
                //::DBus::IntrospectedInterface *introspect() const {
				//	<introspection>
				//}
				
				
			private:
					::DBus::Message _SendSensorData_mstub(const ::DBus::CallMessage &call){
		try {
		::DBus::MessageIter ri = call.reader();
		std::string _sensorType;
ri >> _sensorType;
		std::string _sensorName;
ri >> _sensorName;
		std::string _sensorRawName;
ri >> _sensorRawName;
		std::string _sensorUnit;
ri >> _sensorUnit;
		std::string _sensorDate;
ri >> _sensorDate;
		int32_t _sensorStatus;
ri >> _sensorStatus;
		double _sensorValue;
ri >> _sensorValue;
		std::string _sensorTextValue;
ri >> _sensorTextValue;
impl->SendSensorData(_sensorType, _sensorName, _sensorRawName, _sensorUnit, _sensorDate, _sensorStatus, _sensorValue, _sensorTextValue);
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _SendStatus_mstub(const ::DBus::CallMessage &call){
		try {
		::DBus::MessageIter ri = call.reader();
		std::string _status;
ri >> _status;
impl->SendStatus(_status);
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _SendTask_mstub(const ::DBus::CallMessage &call){
		try {
		::DBus::MessageIter ri = call.reader();
		std::string _what;
ri >> _what;
		std::string _params;
ri >> _params;
		std::string _source;
ri >> _source;
		std::string _destination;
ri >> _destination;
impl->SendTask(_what, _params, _source, _destination);
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _SendNotification_mstub(const ::DBus::CallMessage &call){
		try {
		::DBus::MessageIter ri = call.reader();
		int32_t _level;
ri >> _level;
		std::string _source;
ri >> _source;
		std::string _message;
ri >> _message;
impl->SendNotification(_level, _source, _message);
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}

				
				TBS::BB::Services::Data::IDataCollector::Ptr impl;
};
 } 
 } 
 } 
 } 
 } 


namespace TBS { 
	namespace BB { 
		namespace Services { 
			namespace Data { 
				namespace Stub { 
	class DataDistributor_DBusServer : public ::DBus::InterfaceAdaptor
		{
			public:
				DataDistributor_DBusServer(TBS::BB::Services::Data::IDataDistributor::Ptr impl) :
					::DBus::InterfaceAdaptor("com.TBS.BB.Services.Data.DataDistributor"), impl(impl){
								impl->SensorDataReceived += Poco::delegate(this, &DataDistributor_DBusServer::handlerSensorDataReceived);
		impl->StatusReceived += Poco::delegate(this, &DataDistributor_DBusServer::handlerStatusReceived);
		impl->TaskReceived += Poco::delegate(this, &DataDistributor_DBusServer::handlerTaskReceived);
		impl->NotificationReceived += Poco::delegate(this, &DataDistributor_DBusServer::handlerNotificationReceived);

				}
				virtual ~DataDistributor_DBusServer(){
								impl->SensorDataReceived -= Poco::delegate(this, &DataDistributor_DBusServer::handlerSensorDataReceived);
		impl->StatusReceived -= Poco::delegate(this, &DataDistributor_DBusServer::handlerStatusReceived);
		impl->TaskReceived -= Poco::delegate(this, &DataDistributor_DBusServer::handlerTaskReceived);
		impl->NotificationReceived -= Poco::delegate(this, &DataDistributor_DBusServer::handlerNotificationReceived);

				}
				
				static const std::string & dbuspath(){ static std::string val = "/com/TBS/BB/Services/Data"; return val; }
				static const std::string & dbusname(){ static std::string val = "com.TBS.BB.Services.Data.DataDistributor"; return val; }
                
                //::DBus::IntrospectedInterface *introspect() const {
				//	<introspection>
				//}
				
					void SensorDataReceived(const std::string & sensorType, const std::string & sensorName, const std::string & sensorRawName, const std::string & sensorUnit, const std::string & sensorDate, const int32_t & sensorStatus, const double & sensorValue, const std::string & sensorTextValue){
		::DBus::SignalMessage sig("SensorDataReceived");
		::DBus::MessageIter wi = sig.writer();
		wi << sensorType;
		wi << sensorName;
		wi << sensorRawName;
		wi << sensorUnit;
		wi << sensorDate;
		wi << sensorStatus;
		wi << sensorValue;
		wi << sensorTextValue;
		emit_signal(sig);
	}
	void StatusReceived(const std::string & status){
		::DBus::SignalMessage sig("StatusReceived");
		::DBus::MessageIter wi = sig.writer();
		wi << status;
		emit_signal(sig);
	}
	void TaskReceived(const std::string & what, const std::string & params, const std::string & source, const std::string & destination){
		::DBus::SignalMessage sig("TaskReceived");
		::DBus::MessageIter wi = sig.writer();
		wi << what;
		wi << params;
		wi << source;
		wi << destination;
		emit_signal(sig);
	}
	void NotificationReceived(const int32_t & level, const std::string & source, const std::string & message){
		::DBus::SignalMessage sig("NotificationReceived");
		::DBus::MessageIter wi = sig.writer();
		wi << level;
		wi << source;
		wi << message;
		emit_signal(sig);
	}

			private:
				
						void handlerSensorDataReceived(TBS::BB::Services::Data::IDataDistributor::SensorDataReceivedArg & arg){
			this->SensorDataReceived(arg.sensorType, arg.sensorName, arg.sensorRawName, arg.sensorUnit, arg.sensorDate, arg.sensorStatus, arg.sensorValue, arg.sensorTextValue);
		}
		void handlerStatusReceived(TBS::BB::Services::Data::IDataDistributor::StatusReceivedArg & arg){
			this->StatusReceived(arg);
		}
		void handlerTaskReceived(TBS::BB::Services::Data::IDataDistributor::TaskReceivedArg & arg){
			this->TaskReceived(arg.what, arg.params, arg.source, arg.destination);
		}
		void handlerNotificationReceived(TBS::BB::Services::Data::IDataDistributor::NotificationReceivedArg & arg){
			this->NotificationReceived(arg.level, arg.source, arg.message);
		}

				TBS::BB::Services::Data::IDataDistributor::Ptr impl;
};
 } 
 } 
 } 
 } 
 } 



#endif //_DATA_DBUSSERVER_H_
#endif 

